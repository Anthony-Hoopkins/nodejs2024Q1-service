openapi: 3.0.0
paths:
  /user:
    post:
      operationId: UserController_create
      summary: Create User
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Id is invalid
        '404':
          description: Entity not found
      tags:
        - User
    get:
      operationId: UserController_findAll
      summary: Get All Users
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Id is invalid
        '404':
          description: Entity not found
      tags:
        - User
  /user/{id}:
    get:
      operationId: UserController_findOne
      summary: Get User by Id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Id is invalid
        '404':
          description: Entity not found
      tags:
        - User
    put:
      operationId: UserController_update
      summary: Update User by Id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Id is invalid
        '403':
          description: Wrong password
        '404':
          description: Entity not found
      tags:
        - User
    delete:
      operationId: UserController_remove
      summary: Remove User by Id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Id is invalid
        '404':
          description: Entity not found
      tags:
        - User
  /artist:
    post:
      operationId: ArtistController_create
      summary: Create Artist
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Id is invalid
        '404':
          description: Entity not found
      tags:
        - Artist
    get:
      operationId: ArtistController_findAll
      summary: Get All Artists
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
        '400':
          description: Id is invalid
        '404':
          description: Entity not found
      tags:
        - Artist
  /artist/{id}:
    get:
      operationId: ArtistController_findOne
      summary: Get Artist by Id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Id is invalid
        '404':
          description: Entity not found
      tags:
        - Artist
    put:
      operationId: ArtistController_update
      summary: Update Artist by Id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArtistDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Id is invalid
        '404':
          description: Entity not found
      tags:
        - Artist
    delete:
      operationId: ArtistController_remove
      summary: Remove Artist by Id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Id is invalid
        '404':
          description: Entity not found
      tags:
        - Artist
  /track:
    post:
      operationId: TrackController_create
      summary: Create Track
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Id is invalid
        '404':
          description: Entity not found
      tags:
        - Track
    get:
      operationId: TrackController_findAll
      summary: Get All Tracks
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
        '400':
          description: Id is invalid
        '404':
          description: Entity not found
      tags:
        - Track
  /track/{id}:
    get:
      operationId: TrackController_findOne
      summary: Get Track by Id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Id is invalid
        '404':
          description: Entity not found
      tags:
        - Track
    put:
      operationId: TrackController_update
      summary: Update Track by Id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Id is invalid
        '404':
          description: Entity not found
      tags:
        - Track
    delete:
      operationId: TrackController_remove
      summary: Remove Track by Id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Id is invalid
        '404':
          description: Entity not found
      tags:
        - Track
  /album:
    post:
      operationId: AlbumController_create
      summary: Create Album
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Id is invalid
        '404':
          description: Entity not found
      tags:
        - Album
    get:
      operationId: AlbumController_findAll
      summary: Get All Albums
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
        '400':
          description: Id is invalid
        '404':
          description: Entity not found
      tags:
        - Album
  /album/{id}:
    get:
      operationId: AlbumController_findOne
      summary: Get Album by Id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Id is invalid
        '404':
          description: Entity not found
      tags:
        - Album
    put:
      operationId: AlbumController_update
      summary: Update Album by Id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbumDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Id is invalid
        '404':
          description: Entity not found
      tags:
        - Album
    delete:
      operationId: AlbumController_remove
      summary: Remove Album by Id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Id is invalid
        '404':
          description: Entity not found
      tags:
        - Album
  /favs:
    get:
      operationId: FavoritesController_findAll
      summary: Get All Favorites
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Favorite'
        '400':
          description: Id is invalid
      tags:
        - Favorites
  /favs/artist/{id}:
    post:
      operationId: FavoritesController_addArtist
      summary: Add artist to the favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: created
        '400':
          description: Id is invalid
      tags:
        - Favorites
    delete:
      operationId: FavoritesController_removeArtist
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Id is invalid
        '422':
          description: Unprocessable Entity
      tags:
        - Favorites
  /favs/album/{id}:
    post:
      operationId: FavoritesController_addAlbum
      summary: Add album to the favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
        '400':
          description: Id is invalid
      tags:
        - Favorites
    delete:
      operationId: FavoritesController_removeAlbum
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Id is invalid
        '422':
          description: Unprocessable Entity
      tags:
        - Favorites
  /favs/track/{id}:
    post:
      operationId: FavoritesController_addTrack
      summary: Add track to the favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
        '400':
          description: Id is invalid
      tags:
        - Favorites
    delete:
      operationId: FavoritesController_removeTrack
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Id is invalid
        '422':
          description: Unprocessable Entity
      tags:
        - Favorites
info:
  title: RS NestJS application
  description: Rest API documentation
  version: 0.0.1
  contact: {}
tags: []
servers: []
components:
  schemas:
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          example: app user
          description: login
        password:
          type: string
          example: 123qwerty
          description: password
      required:
        - login
        - password
    User:
      type: object
      properties:
        id:
          type: string
          example: 0a35dd62-e09f-444b-a628-f4e7c6954f57
          description: Uniq ID
        createdAt:
          type: number
          example: 1710152428565
          description: createdAt
        updatedAt:
          type: number
          example: 1710152428565
          description: updatedAt
        version:
          type: number
          example: 1
          description: version
        login:
          type: string
          example: app_user
          description: Uniq login name
      required:
        - id
        - createdAt
        - updatedAt
        - version
        - login
    UpdateUserDto:
      type: object
      properties:
        oldPassword:
          type: string
          example: 123qwerty
          description: Old password
        newPassword:
          type: string
          example: new_123qwerty
          description: New password
      required:
        - oldPassword
        - newPassword
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
          example: 50 Cent
          description: Name
        grammy:
          type: boolean
          example: true
          description: Does have Grammy
      required:
        - name
        - grammy
    Artist:
      type: object
      properties:
        id:
          type: string
          example: 0a35dd62-e09f-444b-a628-f4e7c6954f57
          description: Uniq ID
        createdAt:
          type: number
          example: 1710152428565
          description: createdAt
        updatedAt:
          type: number
          example: 1710152428565
          description: updatedAt
        version:
          type: number
          example: 1
          description: version
        name:
          type: string
          example: Filip K
          description: Artist name
        grammy:
          type: boolean
          example: true
          description: Is hi has grammy
      required:
        - id
        - createdAt
        - updatedAt
        - version
        - name
        - grammy
    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
          example: 50 Cent
          description: Name
        grammy:
          type: boolean
          example: true
          description: Does have Grammy
      required:
        - name
        - grammy
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: Go to the horizon
          description: Name
        duration:
          type: number
          example: 278
          description: Duration
        artistId:
          type: string
          example: 0a35dd62-e09f-444b-a628-f4e7c6954f57
          description: Artist Id
        albumId:
          type: string
          example: 0a35dd62-e09f-444b-a628-f4e7c6954f57
          description: Album Id
      required:
        - name
        - duration
        - artistId
        - albumId
    Track:
      type: object
      properties:
        id:
          type: string
          example: 0a35dd62-e09f-444b-a628-f4e7c6954f57
          description: Uniq ID
        createdAt:
          type: number
          example: 1710152428565
          description: createdAt
        updatedAt:
          type: number
          example: 1710152428565
          description: updatedAt
        version:
          type: number
          example: 1
          description: version
        name:
          type: string
          example: My heart will go on
          description: Track name
        artistId:
          type: string
          example: 0a35dd62-e09f-444b-a628-f4e7c6954f57
          description: Uniq Artist ID
        albumId:
          type: string
          example: 0a35dd62-e09f-444b-a628-f4e7c6954f57
          description: Uniq Album ID
        duration:
          type: number
          example: 321
          description: Duration time
      required:
        - id
        - createdAt
        - updatedAt
        - version
        - name
        - artistId
        - albumId
        - duration
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: Go to the horizon
          description: Name
        duration:
          type: number
          example: 278
          description: Duration
        artistId:
          type: string
          example: 0a35dd62-e09f-444b-a628-f4e7c6954f57
          description: Artist Id
        albumId:
          type: string
          example: 0a35dd62-e09f-444b-a628-f4e7c6954f57
          description: Album Id
      required:
        - name
        - duration
        - artistId
        - albumId
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
          example: The best Album
          description: Name
        year:
          type: number
          example: 2017
          description: Year
        artistId:
          type: string
          example: 0a35dd62-e09f-444b-a628-f4e7c6954f57
          description: Artist Id
      required:
        - name
        - year
        - artistId
    Album:
      type: object
      properties:
        id:
          type: string
          example: 0a35dd62-e09f-444b-a628-f4e7c6954f57
          description: Uniq ID
        createdAt:
          type: number
          example: 1710152428565
          description: createdAt
        updatedAt:
          type: number
          example: 1710152428565
          description: updatedAt
        version:
          type: number
          example: 1
          description: version
        name:
          type: string
          example: My dear hare
          description: Album name
        year:
          type: number
          example: 2017
          description: Year of creation
        artistId:
          type: string
          example: 0a35dd62-e09f-444b-a628-f4e7c6954f57
          description: Uniq Artist ID
      required:
        - id
        - createdAt
        - updatedAt
        - version
        - name
        - year
        - artistId
    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
          example: The best Album
          description: Name
        year:
          type: number
          example: 2017
          description: Year
        artistId:
          type: string
          example: 0a35dd62-e09f-444b-a628-f4e7c6954f57
          description: Artist Id
      required:
        - name
        - year
        - artistId
    Favorite:
      type: object
      properties:
        artists:
          example:
            - Shakira
            - 50 Cent
          description: Favorite artists
          type: array
          items:
            type: string
        albums:
          example:
            - Go to the horizon
            - Whats up
          description: Favorite Albums
          type: array
          items:
            type: string
        tracks:
          example:
            - Walk by railways to South
            - Story about
          description: Favorite Tracks
          type: array
          items:
            type: string
      required:
        - artists
        - albums
        - tracks
